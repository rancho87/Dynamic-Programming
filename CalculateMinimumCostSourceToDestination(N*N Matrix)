#include <iostream>
#include<string>
#include <unordered_map>
using namespace std;
#define N 5

int minCost(int cost[][N])
{
        int lockup[N];
        for(int i=0;i<N;i++)
            lockup[i]=cost[0][i];
            
        bool is_filled = false;
	while (!is_filled)
	{
		is_filled = true;

		// fill lookup[] in bottom-up manner
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (lockup[i] > lockup[j] + cost[j][i]) {
					lockup[i] = lockup[j] + cost[j][i];
					is_filled = false;	// mark lookup[] as NOT filled
				}
			}
		}
	}
	return lockup[N-1];
}
int main()
{
    
    int cost[N][N] =
	{
		{ 0, 25, 20, 10, 105 },
		{ 20, 0, 15, 80, 80 },
		{ 30, 15, 0, 70, 90 },
		{ 10, 10, 50, 0, 100 },
		{ 40, 50, 5, 10, 0 }
	};
	cout<<minCost(cost);
    return 0;
}

///This is for top to down approach to any destination

#include<iostream> 
#define R 5
#define C 5 
using namespace std;
  
int min(int x, int y, int z); 
  
int minCost(int cost[R][C], int m, int n) 
{ 
     int i, j; 
  
     // Instead of following line, we can use int tc[m+1][n+1] or  
     // dynamically allocate memory to save space. The following line is 
     // used to keep the program simple and make it working on all compilers. 
     int tc[R][C];   
  
     tc[0][0] = cost[0][0]; 
  
     /* Initialize first column of total cost(tc) array */
     for (i = 1; i <= m; i++) 
        tc[i][0] = tc[i-1][0] + cost[i][0]; 
  
     /* Initialize first row of tc array */
     for (j = 1; j <= n; j++) 
        tc[0][j] = tc[0][j-1] + cost[0][j]; 
  
     /* Construct rest of the tc array */
     for (i = 1; i <= m; i++) 
        for (j = 1; j <= n; j++) 
            tc[i][j] = min(  tc[i-1][j], tc[i][j-1]) + cost[i][j]; 
  
     return tc[m][n]; 
} 
  
/* A utility function that returns minimum of 3 integers */

int main()
{
    
    int cost[R][C] =
	{
		{ 0, 25, 20, 10, 105 },
		{ 20, 0, 15, 80, 80 },
		{ 30, 15, 0, 70, 90 },
		{ 10, 10, 50, 0, 100 },
		{ 40, 50, 5, 10, 0 }
	};
	
	cout<<minCost(cost,0,0);
    return 0;
}
