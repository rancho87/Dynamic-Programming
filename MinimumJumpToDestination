
#include<iostream> 
#include <bits/stdc++.h>
using namespace std;
  
  
int findMinJump(int cost[], int m) 
{ 
    int max_ele=INT_MAX;
    if (cost[0] == 0)
		return max_ele;

	// lookup[i] stores min jumps required to reach arr[i] from source arr[0]
	int lookup[m];
	for (int i = 0; i < m; i++)
		lookup[i] = max_ele;

	// destination is same as source
	lookup[0] = 0;
	
	for(int i=0;i<m;i++)
	{
	    for(int j=1;(i+j <m) && j <= min(m - 1, cost[i]);j++)
	        lookup[i + j] = (lookup[i + j] != max_ele) ? min(lookup[i + j], lookup[i] + 1): (lookup[i] + 1);
	}
    return lookup[m - 1];
} 
  
/* A utility function that returns minimum of 3 integers */

int main()
{
    
    int cost[] = { 4, 2, 0, 3, 2, 0, 1, 8 };
	int n = sizeof(cost) / sizeof(cost[0]);

	cout<<findMinJump(cost,n);
    return 0;
}



#include<iostream> 
#include <bits/stdc++.h>
#include <stdlib.h>
#include <limits.h>
using namespace std;
  
  
int findMinJump(int arr[],int i , int m,int lookup[]) 
{ 
    if (i == m - 1)
		return 0;

	// base case: array index out of bound or destination is
	// unreachable from source
	if (i >= m || arr[i] == 0)
		return INT_MAX;

	// if the sub-problem is seen before
	if (lookup[i] != 0)
		return lookup[i];

    int min_jumps = INT_MAX;
	for (int j = i + 1; j <= i + arr[i]; j++)
	{
		int cost = findMinJump(arr, j, m, lookup);
		if (cost != INT_MAX)
			min_jumps = min(min_jumps, cost + 1);
	}

	// save sub-problem solution and return minimum jumps required
	return (lookup[i] = min_jumps);

} 
  
/* A utility function that returns minimum of 3 integers */

int main()
{
    
    int arr[] = { 4, 2, 0, 3, 2, 0, 1, 8 };
	int n = sizeof(arr) / sizeof(arr[0]);
    int lookup[n];
	memset(lookup, 0, n * sizeof(int));
	cout<<findMinJump(arr,0,n,lookup);
    return 0;
}

